"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-c&$8cx^5bw5uxr=ju3gt!3$b-h8qb2wrnekggdrr@*2t49b@pk'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'allauth_basic.apps.AllauthBasicConfig',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# -------------------------------------------------------------------------------------------------
# Custom settings
# -------------------------------------------------------------------------------------------------
AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',
]

LOGIN_URL = "/login/"

# EMAIL_BACKEND is required to use 'allauth'. For production, use a proper backend.
# Console backend outputs email to console.
# Without it, this error will be returned: "No connection could be made because the target machine actively refused it."
EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

# -------------------------------------------------------------------------------------------------
# Added for allauth
# -------------------------------------------------------------------------------------------------

# -------------------------------------------------------------------------------------------------
# Custom allauth related settings.

# Whether or not to use allauth at all
ENABLE_ALLAUTH = True

# Control what allauth signup types to allow
# From Stackoverflow: https://stackoverflow.com/questions/17923692/turn-off-user-social-registration-in-django-allauth
ACCOUNT_ALLOW_SIGNUPS = False        # allow manual signup
SOCIALACCOUNT_ALLOW_SIGNUPS = True   # allow social signup

# -------------------------------------------------------------------------------------------------
# Standard allauth settings

ACCOUNT_ADAPTER = 'allauth_basic.adapter.CustomAccountAdapter'
ACCOUNT_PRESERVE_USERNAME_CASING = False  # performance
ACCOUNT_UNIQUE_EMAIL = True
SOCIALACCOUNT_ADAPTER = 'allauth_basic.adapter.CustomSocialAccountAdapter'

# Automatically log in users after password reset.
ACCOUNT_LOGIN_ON_PASSWORD_RESET = True

# Redirect here after successful email confirmation.
ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL = '/accounts/login/'

SOCIALACCOUNT_AUTO_SIGNUP = True
SOCIALACCOUNT_EMAIL_VERIFICATION = "mandatory"
SOCIALACCOUNT_EMAIL_REQUIRED = True

if ENABLE_ALLAUTH is True:

    INSTALLED_APPS += [
    
        # Nicer styling of allauth
        "allauth_ui",

        # django-allauth
        # docs: https://docs.allauth.org/en/latest/installation/quickstart.html
        'allauth',
        'allauth.account',
        'allauth.socialaccount',
        'allauth.socialaccount.providers.openid_connect',

        # Required by allauth-ui
        "widget_tweaks",

    ]

    AUTHENTICATION_BACKENDS += [
        # `allauth` specific authentication methods, such as login by email
        'allauth.account.auth_backends.AuthenticationBackend',
    ]

    MIDDLEWARE += [
        # django-allauth
        "allauth.account.middleware.AccountMiddleware",
    ]

    # Override LOGIN_URL when using allauth to point to it's login page
    LOGIN_URL = "/accounts/login/"

    # django-allauth provider settings
    # These can be entered here (recommended) or in the admin under 'allauth accounts' & 'allauth social accounts'.
    # Keep secrets in env.cfg, so they are never committed to source control.
    # docs: https://docs.allauth.org/en/latest/socialaccount/provider_configuration.html
    SOCIALACCOUNT_PROVIDERS = {
        "openid_connect": {
            "APPS": [
                {
                    "provider_id": "keycloak",
                    "name": "Keycloak",
                    "client_id": "Keycloak_client",
                    "secret": "the_secret_...",
                    "settings": {
                        "server_url": "http://localhost:8080/realms/RealmName",
                        # Optional: "client_secret_basic" or "client_secret_post"
                        "token_auth_method": "client_secret_basic",
                    },
                }
            ]
        }
    }